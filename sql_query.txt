WITH session_data AS (
  SELECT
    ROW_NUMBER() OVER () AS SESSION_ID_1,
    EVENT_DTM AS SESSION_START_DTM,
    LEAD(EVENT_DTM) OVER (PARTITION BY USER_ID ORDER BY EVENT_DTM) AS SESSION_END_DTM,
    USER_ID,
    ROW_NUMBER() OVER (PARTITION BY USER_ID ORDER BY EVENT_DTM) AS SESSION_NUMBER,
    IS_CLIENT
  FROM (
    SELECT
      ROW_NUMBER() OVER () AS SESSION_ID,
      USER_ID,
      EVENT_DTM,
      EVENT_NAME,
      CASE WHEN SUM(CASE WHEN EVENT_NAME = 'purchase' THEN 1 ELSE 0 END) OVER (PARTITION BY USER_ID ORDER BY EVENT_DTM ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) > 0 THEN 1 ELSE 0 END AS IS_CLIENT,
      LAG(EVENT_NAME) OVER (PARTITION BY USER_ID ORDER BY EVENT_DTM) AS PREVIOUS_EVENT_NAME,    
      LAG(EVENT_DTM) OVER (PARTITION BY USER_ID ORDER BY EVENT_DTM) AS PREVIOUS_EVENT_DTM,
      LEAD(EVENT_NAME) OVER (PARTITION BY USER_ID ORDER BY EVENT_DTM) AS NEXT_EVENT_NAME,
      LEAD(EVENT_DTM) OVER (PARTITION BY USER_ID ORDER BY EVENT_DTM) AS NEXT_EVENT_DTM,
      ROW_NUMBER() OVER (ORDER BY EVENT_DTM) -
      SUM(CASE WHEN EVENT_NAME = 'session_start' THEN 1 ELSE 0 END) OVER (PARTITION BY USER_ID ORDER BY EVENT_DTM) AS SESSION_NUMBER
    FROM events  
  )
  WHERE (PREVIOUS_EVENT_NAME = 'session_end'
        OR (JULIANDAY(EVENT_DTM) - JULIANDAY(PREVIOUS_EVENT_DTM)) * 24 * 60 > 30
        OR DATE(EVENT_DTM) > DATE(PREVIOUS_EVENT_DTM)
        OR PREVIOUS_EVENT_NAME IS NULL
        OR NEXT_EVENT_NAME = 'session_start'
        OR (JULIANDAY(NEXT_EVENT_DTM) - JULIANDAY(EVENT_DTM)) * 24 * 60 > 30
        OR DATE(NEXT_EVENT_DTM) > DATE(EVENT_DTM)
        OR NEXT_EVENT_NAME IS NULL)
  GROUP BY USER_ID, SESSION_NUMBER
)

SELECT ROW_NUMBER() OVER () AS SESSION_ID, SESSION_START_DTM, SESSION_END_DTM, USER_ID, 
    CASE 
      WHEN SESSION_NUMBER % 2 = 1
        THEN FLOOR(SESSION_NUMBER / 2) + 1
        ELSE FLOOR(SESSION_NUMBER / 2)
    END AS SESSION_NUMBER, 
    IS_CLIENT
FROM session_data
WHERE SESSION_ID_1 % 2 = 1